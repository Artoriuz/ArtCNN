// MIT License

// Copyright (c) 2024 Joao Chrisostomo, Kacper MichajÅ‚ow

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//!DESC ArtCNN C4F8 DS (Conv2D)
//!COMPUTE 24 16 12 16
//!HOOK LUMA
//!BIND LUMA
//!SAVE conv2d
//!WIDTH LUMA.w 2.0 *
//!HEIGHT LUMA.h 1.0 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif

const ivec2 ksize = ivec2(3, 3);
const ivec2 offset = ksize / 2;
const ivec2 wg_size = ivec2(gl_WorkGroupSize);
const ivec2 isize = wg_size + ksize - 1;
shared F inp[1][isize.y][isize.x];
void hook() {
    const uvec2 local_xy = gl_LocalInvocationID.xy;
    ivec2 base = ivec2(gl_WorkGroupID) * wg_size;
    for (uint y = local_xy.y; y < isize.y; y += wg_size.y) {
        for (uint x = local_xy.x; x < isize.x; x += wg_size.x) {
            const ivec2 input_base = (base + ivec2(x,y) - offset) * ivec2(1, 1);
            inp[0][y][x] = F(LUMA_mul * texelFetch(LUMA_raw, input_base + ivec2(0, 0), 0).x);
        }
    }

    barrier();
    V4 result0 = V4(-0.02801118, -0.0074399556, -0.10194064, -0.022672422);
    V4 result1 = V4(0.028394168, -0.024099018, -0.05803851, -0.03559192);
    const F inp_0_0_0 = inp[0][local_xy.y + 0][local_xy.x + 0];
    const F inp_0_1_0 = inp[0][local_xy.y + 0][local_xy.x + 1];
    const F inp_0_2_0 = inp[0][local_xy.y + 0][local_xy.x + 2];
    const F inp_0_0_1 = inp[0][local_xy.y + 1][local_xy.x + 0];
    const F inp_0_1_1 = inp[0][local_xy.y + 1][local_xy.x + 1];
    const F inp_0_2_1 = inp[0][local_xy.y + 1][local_xy.x + 2];
    const F inp_0_0_2 = inp[0][local_xy.y + 2][local_xy.x + 0];
    const F inp_0_1_2 = inp[0][local_xy.y + 2][local_xy.x + 1];
    const F inp_0_2_2 = inp[0][local_xy.y + 2][local_xy.x + 2];
    result0 += V4(0.056756422, -0.15470877, -0.0684816, 0.09315198) * inp_0_0_0;
    result0 += V4(0.044200037, -0.08496709, 0.2292948, -0.36482885) * inp_0_1_0;
    result0 += V4(-0.015450121, -0.20748605, -0.16625859, 0.06665416) * inp_0_2_0;
    result0 += V4(0.18243651, 0.2932645, 0.14744864, -0.21905139) * inp_0_0_1;
    result0 += V4(0.4264176, 0.0091094915, 0.44512078, 0.7943332) * inp_0_1_1;
    result0 += V4(0.04453003, -0.034733083, 0.1484422, -0.07876345) * inp_0_2_1;
    result0 += V4(0.06835387, 0.0315078, -0.13072269, 0.12693585) * inp_0_0_2;
    result0 += V4(0.11702141, 0.22138971, -0.18767287, -0.24359643) * inp_0_1_2;
    result0 += V4(-0.15564561, 0.00757589, 0.13708588, -0.06468673) * inp_0_2_2;
    result1 += V4(-0.13310075, 0.21001826, -9.576617e-05, -0.22547118) * inp_0_0_0;
    result1 += V4(0.28193495, -0.07731184, -0.16126674, 0.09200386) * inp_0_1_0;
    result1 += V4(0.07528155, 0.21629976, -0.19370952, -0.09156876) * inp_0_2_0;
    result1 += V4(-0.09830401, 0.025378337, 0.35557324, 0.009994511) * inp_0_0_1;
    result1 += V4(0.41594043, -0.21106751, 0.17879647, 0.2312221) * inp_0_1_1;
    result1 += V4(-0.3858675, -0.2613467, 0.024141394, -0.13866024) * inp_0_2_1;
    result1 += V4(-0.10442569, -0.011918215, -0.03334325, 0.042739887) * inp_0_0_2;
    result1 += V4(-0.016081143, 0.2316605, 0.048238687, 0.12673306) * inp_0_1_2;
    result1 += V4(-0.009394216, -0.023445213, -0.19988565, -0.028576149) * inp_0_2_2;
    const ivec2 output_base = ivec2(gl_GlobalInvocationID) * ivec2(2, 1);
    imageStore(out_image, output_base + ivec2(0, 0), result0);
    imageStore(out_image, output_base + ivec2(1, 0), result1);
}

//!DESC ArtCNN C4F8 DS (Conv2D-1-ReLU)
//!COMPUTE 24 16 12 16
//!HOOK LUMA
//!BIND conv2d
//!SAVE conv2d_1
//!WIDTH LUMA.w 2.0 *
//!HEIGHT LUMA.h 1.0 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif

const ivec2 ksize = ivec2(3, 3);
const ivec2 offset = ksize / 2;
const ivec2 wg_size = ivec2(gl_WorkGroupSize);
const ivec2 isize = wg_size + ksize - 1;
shared V4 inp[2][isize.y][isize.x];
void hook() {
    const uvec2 local_xy = gl_LocalInvocationID.xy;
    ivec2 base = ivec2(gl_WorkGroupID) * wg_size;
    for (uint y = local_xy.y; y < isize.y; y += wg_size.y) {
        for (uint x = local_xy.x; x < isize.x; x += wg_size.x) {
            const ivec2 input_base = (base + ivec2(x,y) - offset) * ivec2(2, 1);
            inp[0][y][x] = V4(conv2d_mul * texelFetch(conv2d_raw, input_base + ivec2(0, 0), 0));
            inp[1][y][x] = V4(conv2d_mul * texelFetch(conv2d_raw, input_base + ivec2(1, 0), 0));
        }
    }

    barrier();
    V4 result0 = V4(0.09397976, -0.06684842, -0.08876468, 0.20053509);
    V4 result1 = V4(0.10073499, -0.029974505, -0.02237452, -0.08836168);
    const V4 inp_0_0_0 = inp[0][local_xy.y + 0][local_xy.x + 0];
    const V4 inp_0_1_0 = inp[0][local_xy.y + 0][local_xy.x + 1];
    const V4 inp_0_2_0 = inp[0][local_xy.y + 0][local_xy.x + 2];
    const V4 inp_0_0_1 = inp[0][local_xy.y + 1][local_xy.x + 0];
    const V4 inp_0_1_1 = inp[0][local_xy.y + 1][local_xy.x + 1];
    const V4 inp_0_2_1 = inp[0][local_xy.y + 1][local_xy.x + 2];
    const V4 inp_0_0_2 = inp[0][local_xy.y + 2][local_xy.x + 0];
    const V4 inp_0_1_2 = inp[0][local_xy.y + 2][local_xy.x + 1];
    const V4 inp_0_2_2 = inp[0][local_xy.y + 2][local_xy.x + 2];
    result0 += M4(-0.06309986, 0.09080184, 0.010820807, 0.050111562, -0.08484432, 0.12009073, 0.0269897, -0.2587355, 0.06720338, 0.2821796, -0.11985928, -0.12857738, 0.023076074, 0.2852489, 0.0142034665, 0.069787145) * inp_0_0_0;
    result0 += M4(-0.18044375, 0.058893412, -0.05189664, 0.05104656, 0.137026, 0.70671993, -0.22933918, 0.118647866, 0.17956433, -0.24383421, 0.15974681, 0.11745542, 0.019180134, -0.76375145, 0.122382484, 0.20558356) * inp_0_1_0;
    result0 += M4(-0.006444118, 0.043583345, -0.15468852, -0.05874822, -0.11883353, 0.12744778, -0.06870549, -0.16967192, -0.055678044, -0.56998056, -0.09594097, 0.012256161, 0.14440712, -0.10222232, 0.052783433, -0.20218979) * inp_0_2_0;
    result0 += M4(0.0010843351, -0.13018535, -0.2873078, 0.20965941, -0.35474858, -0.19235942, -0.000932732, -0.33887798, 0.04061171, 0.10969188, -0.11047667, -0.15209056, -0.24241956, -0.06724361, -0.10973749, 0.33790866) * inp_0_0_1;
    result0 += M4(0.3328121, 0.015882097, 0.23081984, 0.0026080222, 0.013669178, 0.13998994, 0.5563378, 0.05143514, 0.45170918, 0.19041756, -0.65953434, 0.05025036, 0.7146027, -0.0009807531, -1.3585421, -0.4337391) * inp_0_1_1;
    result0 += M4(-0.04932577, 0.21076383, -0.014860587, 0.0033810406, -0.19057365, -0.18454948, 0.26461607, -0.23562323, 0.0400911, -0.19635345, -0.011647725, 0.26386505, 0.45339036, 0.36088794, 0.0850349, 0.4372486) * inp_0_2_1;
    result0 += M4(0.3353838, 0.18159986, 0.15218686, -0.37182096, -0.04492748, -0.059082303, -0.12850602, 0.13319246, 0.047394596, -0.48696178, 0.206577, 0.2011099, -0.11112326, -0.07805271, -0.07691819, 0.3119742) * inp_0_0_2;
    result0 += M4(0.39958182, 0.0638546, 0.3894041, -0.1084743, -0.0428765, -1.0297283, 0.76171494, 0.22859947, 0.1576283, -0.08844426, -0.051838018, -0.33923757, -0.39181805, 0.25194132, 1.0837771, 0.34021896) * inp_0_1_2;
    result0 += M4(-0.0610518, -0.1672547, 0.0791874, 0.06603333, 0.031656213, 0.8219484, -0.025556643, 0.21901299, 0.017969675, 0.22907576, 0.027607493, -0.13906153, 0.0052222027, 1.0637007, -0.052474238, 0.049395476) * inp_0_2_2;
    result1 += M4(-2.2477498e-05, -0.21733396, -0.023998074, -0.14497775, -0.047751196, 0.0707177, -0.029992377, 0.09199848, 0.067757756, 0.25431967, 0.06786604, 0.41740495, 0.17029631, -0.62559545, -0.09254115, 0.12189892) * inp_0_0_0;
    result1 += M4(0.08506314, 0.22155282, -0.057457987, 0.24506941, 0.16094442, 1.0337062, -0.11337412, 0.7345264, -0.15901609, -0.3460572, -0.023038516, -0.77768034, -0.17908883, -0.9363096, -0.04984946, -0.7273618) * inp_0_1_0;
    result1 += M4(-0.120338194, -0.01952167, -0.013332449, 0.25924695, -0.014521901, 0.11858805, 0.12533602, 0.14543645, 0.0031604585, 0.0020577002, 0.010950901, 0.07472439, -0.11013576, 0.113745205, -0.036220282, 0.050340332) * inp_0_2_0;
    result1 += M4(0.1847989, -0.033090387, -0.06545441, -0.062488634, -0.31851667, -0.21357645, -0.15457526, -0.37475467, -0.21794178, 0.19654888, -0.076430574, -0.27532467, 0.23258197, -0.09067534, -0.1085287, -0.18745083) * inp_0_0_1;
    result1 += M4(0.21825665, -0.014623989, -0.20953451, 0.104947776, -0.2367586, -0.49709842, -0.17153785, -0.5922245, 0.58800924, 0.12260797, -0.16088796, 0.09268885, 0.8136312, 0.14388968, -1.016589, 0.50825006) * inp_0_1_1;
    result1 += M4(0.08779697, 0.03142671, 0.16826373, -0.01664177, -0.036228847, -0.012220021, -0.25539908, 0.18787372, 0.008551857, -0.20701301, 0.45075014, -0.15746734, -0.3156006, 0.85527134, 1.685796, -0.35272273) * inp_0_2_1;
    result1 += M4(0.021096058, -0.336512, -0.011223439, 0.03575846, -0.004379662, 0.22370254, 0.225878, 0.32003033, 0.15049428, 0.064641446, 0.093462594, 0.17071597, 0.19978447, 0.38972938, 0.11359385, 0.49829122) * inp_0_0_2;
    result1 += M4(0.27477637, 0.13825989, -0.16944283, 0.07653469, 0.31975713, 0.27880263, 0.010827817, -0.2636629, -0.15937121, -0.24900198, -0.039041344, -0.16866136, 0.16451292, 0.90078014, 0.16486791, -0.10605076) * inp_0_1_2;
    result1 += M4(0.18525094, -0.10091874, 0.10902234, 0.13582107, -0.19554482, 0.31195182, 0.07776855, 0.039675526, -0.040291622, 0.27488375, 0.10281545, -0.12786287, -0.07378922, 0.07340926, 0.17261554, -0.27497578) * inp_0_2_2;
    const V4 inp_1_0_0 = inp[1][local_xy.y + 0][local_xy.x + 0];
    const V4 inp_1_1_0 = inp[1][local_xy.y + 0][local_xy.x + 1];
    const V4 inp_1_2_0 = inp[1][local_xy.y + 0][local_xy.x + 2];
    const V4 inp_1_0_1 = inp[1][local_xy.y + 1][local_xy.x + 0];
    const V4 inp_1_1_1 = inp[1][local_xy.y + 1][local_xy.x + 1];
    const V4 inp_1_2_1 = inp[1][local_xy.y + 1][local_xy.x + 2];
    const V4 inp_1_0_2 = inp[1][local_xy.y + 2][local_xy.x + 0];
    const V4 inp_1_1_2 = inp[1][local_xy.y + 2][local_xy.x + 1];
    const V4 inp_1_2_2 = inp[1][local_xy.y + 2][local_xy.x + 2];
    result0 += M4(-0.02877975, 0.032878276, -0.007306207, 0.10816222, 0.1989365, 0.0005974779, -0.09082836, 0.2621571, -0.11621696, -0.16518709, 0.1323801, 0.058467355, 0.058113415, 0.33959678, -0.035566058, 0.33632046) * inp_1_0_0;
    result0 += M4(-0.21317431, -0.39539793, -0.16890123, -0.044829536, -0.22183245, 0.6159174, 0.12189516, -0.2717953, -0.457883, -0.31543016, -0.23968692, -0.04971702, -0.074333735, -0.12235262, 0.05553893, 0.032535248) * inp_1_1_0;
    result0 += M4(0.05403264, -0.16039568, -0.10675414, 0.026993709, -0.1933598, 0.28335127, -0.0063418048, 0.12694874, 0.057753496, -0.12865806, 0.09008668, 0.19057705, -0.03194001, 0.10207393, 0.13642447, 0.009856674) * inp_1_2_0;
    result0 += M4(0.2711323, -0.50980914, 0.18212958, 0.58381176, 0.14546193, -0.23287082, 0.20448026, 0.1150132, 0.23722845, -0.17212494, 0.2580105, 0.43085334, -0.18785176, -0.33029032, 0.11522247, -0.067746975) * inp_1_0_1;
    result0 += M4(0.6049641, 0.87546897, -0.7182436, 0.0428292, 0.04693806, -0.6501849, 0.9316534, -0.5692935, 0.05195749, -0.20844337, -0.3749184, 0.0575798, 0.042282417, 0.41381434, 0.034136865, 0.08320629) * inp_1_1_1;
    result0 += M4(0.11075934, -0.20998445, -0.2572362, -0.04618787, -0.51061356, 0.17173359, 0.1680786, 0.026147868, -0.18783152, -0.3248669, -0.13969775, -0.3748498, 0.2299535, 0.07420281, 0.010288932, 0.3173902) * inp_1_2_1;
    result0 += M4(-0.03720058, -0.49243084, -0.19947614, -0.20939538, -0.009466418, -0.32677382, -0.56478804, -0.5646365, -0.11837182, -0.29861346, -0.02859112, 0.46593195, -0.05821284, 0.16276354, -0.24664351, -0.14743772) * inp_1_0_2;
    result0 += M4(0.16260521, -0.079757884, 0.55142945, -0.38599783, -0.072588034, 0.6417304, 0.035916217, 0.31532255, -0.15031153, 0.47374424, -0.8919532, 0.15620388, -0.12453324, -0.4047158, 0.42201018, -0.05371994) * inp_1_1_2;
    result0 += M4(0.17617065, -0.11041778, 0.3391506, -0.114033364, -0.08126586, 0.4050993, -0.24003471, -0.009394288, -0.048941266, -0.26255897, -0.030973464, -0.06074032, 0.19832823, -0.042682976, -0.10623051, 0.42102683) * inp_1_2_2;
    result1 += M4(0.0057484414, -0.50415313, -0.04708361, -0.19446652, -0.02596277, -0.050460048, 0.04343292, 0.08346192, -0.1994433, -0.18181206, 0.011639222, -0.41087613, 0.022859065, -0.18001053, -0.00204422, 0.010115223) * inp_1_0_0;
    result1 += M4(-0.23943186, -0.5144843, -0.07234454, -0.073656045, -0.053551234, 0.69355494, -0.37011325, 0.70754176, -0.072590485, -0.454546, -0.13876773, -0.0291416, -0.04088252, 0.29181927, -0.045424603, 0.34449363) * inp_1_1_0;
    result1 += M4(-0.07388231, 0.09224768, 0.14047325, -0.16199191, 0.07012421, 0.16289082, 0.34485576, 0.14082417, -0.02126598, -0.10988446, 0.17887706, -0.15097298, -0.17240286, 0.033243395, 0.15908735, 0.1519096) * inp_1_2_0;
    result1 += M4(-0.06418327, -1.0808686, 0.2521477, -1.650716, 0.10730535, -0.63016206, -0.053093735, -1.4764531, 0.28456718, -0.48450142, 0.2111774, 0.07056117, -0.023997368, -0.11530737, -0.047270484, -0.52963483) * inp_1_0_1;
    result1 += M4(0.6528106, 0.025034044, -1.33449, 0.5884844, -0.26521692, 0.22266458, -0.2571591, 0.029614117, -0.1873992, -0.5291767, -0.46336466, -0.16979526, 0.13290925, 0.016448613, -0.11508783, -0.014949247) * inp_1_1_1;
    result1 += M4(-0.05776585, 0.1598979, 0.15641513, -0.32827494, 0.27362216, 0.031001095, -0.37857664, 0.24385762, 0.22370557, 0.00014219878, -0.77425706, -0.021745294, 0.19026776, 0.14822899, 0.14320183, -0.040846825) * inp_1_2_1;
    result1 += M4(0.0890103, 0.39683232, -0.00096136966, 0.4608894, 0.03508328, 0.5552532, -0.10889217, 0.4853311, -0.18321773, -0.16847757, 0.013807869, -0.41470432, -0.31029725, -0.15626125, -0.08996621, 0.073823) * inp_1_0_2;
    result1 += M4(0.08510058, 0.2423147, -0.07902451, 0.2982945, -0.14966105, -0.3371485, 0.45832214, 0.011958169, -0.09889063, 0.5825108, -0.20795734, 0.24844396, 0.079754, 0.06251858, -0.10243608, -0.30757478) * inp_1_1_2;
    result1 += M4(-0.13588145, 0.1383593, 0.40330362, -0.099396355, 0.15284762, 0.22808236, -0.24574506, 0.067735545, -0.017137382, -0.67240244, -0.12687027, 0.01126083, -0.012810521, -0.03381134, 0.14206766, 0.087618895) * inp_1_2_2;
    const ivec2 output_base = ivec2(gl_GlobalInvocationID) * ivec2(2, 1);
    imageStore(out_image, output_base + ivec2(0, 0), max(result0, V4(0.0)));
    imageStore(out_image, output_base + ivec2(1, 0), max(result1, V4(0.0)));
}

//!DESC ArtCNN C4F8 DS (Conv2D-2-ReLU)
//!COMPUTE 24 16 12 16
//!HOOK LUMA
//!BIND conv2d_1
//!SAVE conv2d_2
//!WIDTH LUMA.w 2.0 *
//!HEIGHT LUMA.h 1.0 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif

const ivec2 ksize = ivec2(3, 3);
const ivec2 offset = ksize / 2;
const ivec2 wg_size = ivec2(gl_WorkGroupSize);
const ivec2 isize = wg_size + ksize - 1;
shared V4 inp[2][isize.y][isize.x];
void hook() {
    const uvec2 local_xy = gl_LocalInvocationID.xy;
    ivec2 base = ivec2(gl_WorkGroupID) * wg_size;
    for (uint y = local_xy.y; y < isize.y; y += wg_size.y) {
        for (uint x = local_xy.x; x < isize.x; x += wg_size.x) {
            const ivec2 input_base = (base + ivec2(x,y) - offset) * ivec2(2, 1);
            inp[0][y][x] = V4(conv2d_1_mul * texelFetch(conv2d_1_raw, input_base + ivec2(0, 0), 0));
            inp[1][y][x] = V4(conv2d_1_mul * texelFetch(conv2d_1_raw, input_base + ivec2(1, 0), 0));
        }
    }

    barrier();
    V4 result0 = V4(-0.0010006584, -0.09352612, 0.023889456, -0.018025493);
    V4 result1 = V4(0.008662731, -0.20055684, -0.019465256, -0.1873544);
    const V4 inp_0_0_0 = inp[0][local_xy.y + 0][local_xy.x + 0];
    const V4 inp_0_1_0 = inp[0][local_xy.y + 0][local_xy.x + 1];
    const V4 inp_0_2_0 = inp[0][local_xy.y + 0][local_xy.x + 2];
    const V4 inp_0_0_1 = inp[0][local_xy.y + 1][local_xy.x + 0];
    const V4 inp_0_1_1 = inp[0][local_xy.y + 1][local_xy.x + 1];
    const V4 inp_0_2_1 = inp[0][local_xy.y + 1][local_xy.x + 2];
    const V4 inp_0_0_2 = inp[0][local_xy.y + 2][local_xy.x + 0];
    const V4 inp_0_1_2 = inp[0][local_xy.y + 2][local_xy.x + 1];
    const V4 inp_0_2_2 = inp[0][local_xy.y + 2][local_xy.x + 2];
    result0 += M4(0.17274442, 0.0817157, -0.032213014, 0.00878297, -1.3125417, -0.015125345, 0.014398469, -0.050664544, -1.3686098, -0.019957205, 0.021120546, 0.05345548, -0.93566304, 0.08779242, 0.026229987, -0.019852776) * inp_0_0_0;
    result0 += M4(0.23438, 0.113244794, 0.008613749, 0.3400578, -0.040724255, 0.041632544, 0.037064638, 0.36360666, -0.05811878, -0.91990876, 0.044757307, -0.84398556, -0.19143206, 0.016954208, -0.053613007, 0.12826127) * inp_0_1_0;
    result0 += M4(-0.060531724, 0.044469643, -0.059920665, -0.11368403, 0.049131066, 0.095927164, 0.0010386708, -0.07388306, 0.018512903, -0.0390325, -0.033506446, -0.37615353, -0.34594136, -0.05152063, 0.010762765, -0.17234041) * inp_0_2_0;
    result0 += M4(0.53614604, 0.3082351, -0.01643242, -0.14996785, 0.070249885, 0.1141216, -0.09664139, 0.1102527, -0.054261632, 0.10455152, 0.054494258, 0.0713492, -0.121568985, 0.14999351, 0.08836976, 0.12816563) * inp_0_0_1;
    result0 += M4(0.23829766, -0.011852902, 0.86767954, 0.57275105, 0.040030546, 0.055024777, 0.045673415, -0.21940477, -0.16514094, -1.370014, -0.00455911, -0.025453176, 0.1452603, 0.501147, -0.058120348, 0.23184028) * inp_0_1_1;
    result0 += M4(0.12988047, 0.0797238, -0.174753, 0.053972587, -0.041217137, 0.07491766, -0.014657562, -0.017376602, 0.064346135, 0.017485986, -0.007675408, 0.03066363, 0.023532445, 0.07092486, -0.034273613, -0.13576284) * inp_0_2_1;
    result0 += M4(-0.3237805, 0.28975582, 0.03429158, 0.011119669, 0.12915319, 0.14802402, -0.065184906, 0.0802009, 0.08052121, 0.045398075, 0.0046743546, 0.030836705, 0.028120656, 0.17061621, 0.0087219225, 0.05511976) * inp_0_0_2;
    result0 += M4(0.2792787, 0.53257084, 0.008106825, 0.28006163, -0.059984274, 0.041337173, 0.03489181, 0.06893661, -0.044102713, 0.006079399, -0.0037346368, 0.02853942, 0.08713241, -0.0046132, 0.009976006, -0.031052895) * inp_0_1_2;
    result0 += M4(-0.08290729, 0.041297484, 0.06199452, -0.030709652, -0.0013737779, 0.063893184, 0.014120376, 0.069817655, 0.052532323, 0.009361851, -0.017111601, 0.046518058, 0.02468349, -0.059131082, 0.025211401, 0.04234193) * inp_0_2_2;
    result1 += M4(-0.36868733, -0.19033603, -0.17114636, -0.14972888, -0.27732065, -0.08001799, -0.15222567, 0.06952032, -0.15076803, 0.08584497, -0.100580595, -0.19384149, 0.09605708, 0.086001135, -0.015613624, 0.122678906) * inp_0_0_0;
    result1 += M4(-0.41204324, -0.051205683, -0.012901984, 0.019342331, -0.3604556, -0.065064035, -0.13495561, 0.053731166, 0.18121704, 0.054884285, 0.1529295, -0.7180367, 0.08586154, 0.16780257, 0.014379608, 0.10084534) * inp_0_1_0;
    result1 += M4(-0.059601348, 0.19688612, -0.037348237, 0.047756962, -0.10541171, 0.03696213, -0.065836005, 0.10308479, 0.122101836, -0.628517, -0.1647743, -0.054961037, -0.04675278, 0.32644853, 0.034484416, 0.103601664) * inp_0_2_0;
    result1 += M4(0.4205199, -0.005461205, -0.26485923, 0.20629552, -0.4099378, -0.095198736, -0.31769234, 0.29144073, -0.1456565, 0.045757227, -0.20438358, -0.20585658, -0.13620119, 0.08294671, 0.10497855, 0.093256496) * inp_0_0_1;
    result1 += M4(0.30153072, 0.1387877, 0.306927, -0.60725486, -0.6861998, 0.09458751, -0.06264536, 0.06522201, 0.1942845, -0.4577259, 0.19461735, -0.5367641, -0.38345653, 0.012620427, -0.069888875, 0.9637807) * inp_0_1_1;
    result1 += M4(-0.09970146, -0.06751892, 0.03531737, -0.12038364, -0.31983346, 0.03971089, -0.0002741718, -0.039288297, -0.10596879, -0.31428352, -0.15341642, -0.022104938, 0.1705252, 0.8202084, -0.01419133, 0.23028167) * inp_0_2_1;
    result1 += M4(-0.15717703, -0.12507984, -0.49634448, 0.011781656, -0.30829012, 0.06956683, 0.024848882, 0.049087044, -0.05699784, 0.010828488, -0.052565202, 0.04675776, -0.02319969, 0.11256287, -0.060484838, 0.02488519) * inp_0_0_2;
    result1 += M4(-0.52964765, -0.16817039, -0.14675939, 0.7192744, -0.32342535, -0.07966448, 0.036591895, -0.0108024385, -0.007967781, -0.03076297, 0.021551546, 0.028691366, 0.06791873, -0.15288903, 0.07531753, -0.055576887) * inp_0_1_2;
    result1 += M4(0.21303411, 0.40117657, 0.09619625, -0.15438296, -0.12569577, 0.07315881, 0.053873707, 0.028657055, -0.07929907, -0.041001946, 0.006423279, -0.010481179, 0.06917458, 0.110603, 0.091364205, 0.054686163) * inp_0_2_2;
    const V4 inp_1_0_0 = inp[1][local_xy.y + 0][local_xy.x + 0];
    const V4 inp_1_1_0 = inp[1][local_xy.y + 0][local_xy.x + 1];
    const V4 inp_1_2_0 = inp[1][local_xy.y + 0][local_xy.x + 2];
    const V4 inp_1_0_1 = inp[1][local_xy.y + 1][local_xy.x + 0];
    const V4 inp_1_1_1 = inp[1][local_xy.y + 1][local_xy.x + 1];
    const V4 inp_1_2_1 = inp[1][local_xy.y + 1][local_xy.x + 2];
    const V4 inp_1_0_2 = inp[1][local_xy.y + 2][local_xy.x + 0];
    const V4 inp_1_1_2 = inp[1][local_xy.y + 2][local_xy.x + 1];
    const V4 inp_1_2_2 = inp[1][local_xy.y + 2][local_xy.x + 2];
    result0 += M4(-2.6879508, 0.08072754, 0.020866053, -0.017343909, -2.3032725, 0.009944784, 0.038967032, 0.0021868714, -2.9015892, 0.038165532, 0.03730755, -0.0031349827, -0.016919177, 0.039231285, -0.02330601, 0.09955381) * inp_1_0_0;
    result0 += M4(-0.0016963263, -0.33986056, -0.04241599, -0.7135, -0.043148912, -0.08402042, -0.05892841, 0.21643871, 0.020558298, 0.045987584, 0.029564157, -0.33639473, 0.13523605, 0.10352691, -0.044231582, -0.28266302) * inp_1_1_0;
    result0 += M4(-0.46887776, -0.10307118, -0.1425792, -0.22036754, -0.0076114507, 0.0034843911, -0.011457256, -0.039588317, 0.027101817, 0.024710182, 0.011279931, 0.028523032, 0.14279838, 0.012954699, -0.05913228, -0.21327104) * inp_1_2_0;
    result0 += M4(-0.24200064, -0.60708374, 0.005377183, 0.028604623, 0.25391418, 0.07882819, -0.013374544, -0.08314505, -0.6002838, -1.2634106, -0.00202587, -0.29519364, -0.1415221, -0.079441346, -0.058566157, 0.1488445) * inp_1_0_1;
    result0 += M4(0.4546429, -0.46726194, 0.43379265, -0.10678238, 0.11211494, 0.51213217, -0.037402093, 0.17779209, -0.018002821, -1.3510057, -0.077822804, -0.6035351, 0.31130525, 1.7231073, 0.089289576, 0.645397) * inp_1_1_1;
    result0 += M4(-0.07600565, 0.3274897, 0.06921083, 0.2626998, -0.11901281, 0.08045531, -0.0012154575, 0.35261187, -0.013440574, 0.013444249, 0.019977082, -0.028836625, -0.21413967, -0.08257211, 0.037713125, -0.14356686) * inp_1_2_1;
    result0 += M4(0.03639762, -0.3035377, -0.098546125, 0.02414988, 0.03518394, 0.016820889, 0.03979173, -0.06440721, -0.025719037, -0.1383065, 0.0429279, 0.009766766, -0.111022, -0.18693066, 3.920341e-05, 0.020998951) * inp_1_0_2;
    result0 += M4(0.1649771, -0.02954469, -0.029759496, -0.39966306, 0.06442391, 0.28235558, 0.009118908, -0.053593982, 0.011229966, -0.03833946, 0.06742809, 0.003895028, -0.06863108, 0.02250808, -0.06664579, 0.24491265) * inp_1_1_2;
    result0 += M4(-0.010000275, -0.08903065, 0.0801627, 0.07954048, 0.03912343, -0.110628, -0.009888823, 0.009313198, -0.030338174, 0.026181834, -0.00058628345, 0.03354505, -0.007491563, -0.1198877, -0.048776116, 0.013759008) * inp_1_2_2;
    result1 += M4(0.19805138, 0.2571953, -0.04773968, 0.17620732, -0.0029438506, 0.0027163988, -0.108999066, 0.18031575, -0.24577576, 0.112503454, -0.034387946, -0.010450167, -0.0032558676, 0.06794249, 0.19554509, -0.13043694) * inp_1_0_0;
    result1 += M4(0.74450386, 0.059668545, 0.44228104, -0.116732314, 0.24926196, 0.116426885, 0.00023013931, 0.066198505, -0.10323138, 0.133788, -0.00327903, 0.120251566, 0.19380574, -0.17776649, 0.21986832, -0.05978318) * inp_1_1_0;
    result1 += M4(0.05267293, -0.45739397, -0.18956164, 0.093181185, 0.08400062, 0.014256551, 0.050291516, 0.023090873, -0.005123668, -0.10008628, 0.007187358, 0.019271417, 0.1258402, 0.0958813, 0.014438271, -0.09332034) * inp_1_2_0;
    result1 += M4(-0.023579929, -0.20292142, 0.6185727, -0.6178467, 0.027636431, -0.083818294, -0.07584882, 0.1990642, 0.06199496, 0.25850916, 0.33638263, -0.64395386, 0.34128514, 0.042080536, 0.3972455, -0.28884053) * inp_1_0_1;
    result1 += M4(0.08457678, 0.1838612, -0.4447531, -0.113240026, 0.18789603, 0.32924792, -0.058233626, 0.3536878, 0.092626624, -1.4131484, 0.034422483, -0.14544141, -0.017494306, -0.199781, -0.15944535, 0.5145509) * inp_1_1_1;
    result1 += M4(-0.37058893, -0.3753653, -0.09985932, 0.23390599, 0.19244993, 0.517978, 0.10939467, 0.053929586, -0.021250393, -0.2328765, -0.030441714, 0.0511398, 0.13637343, 0.89127654, 0.2530603, 0.015408031) * inp_1_2_1;
    result1 += M4(-0.016250012, 0.14140455, 0.40369204, 0.35730106, 0.10899139, -0.057639882, -0.09238868, 0.041647255, 0.10941763, 0.20169882, 0.031558257, 0.124226555, 0.2727578, 0.08268488, 0.27136102, -0.1955002) * inp_1_0_2;
    result1 += M4(-0.21851502, 0.24024929, -0.020783618, 0.31124976, 0.33888736, 0.03076073, -0.09153695, 0.051265683, -0.18834583, 0.19504344, 0.040611543, 0.11456375, 0.17023954, -0.22312513, 0.12271772, -0.16074076) * inp_1_1_2;
    result1 += M4(0.31932315, 0.20428084, 0.07793318, -0.15414397, 0.4403772, -0.17481607, 0.01796942, -0.013201945, -0.04631243, 0.014075528, -0.012514909, 0.03644313, 0.21428439, -0.3913073, 0.13919264, 0.039452385) * inp_1_2_2;
    const ivec2 output_base = ivec2(gl_GlobalInvocationID) * ivec2(2, 1);
    imageStore(out_image, output_base + ivec2(0, 0), max(result0, V4(0.0)));
    imageStore(out_image, output_base + ivec2(1, 0), max(result1, V4(0.0)));
}

//!DESC ArtCNN C4F8 DS (Conv2D-3-ReLU)
//!COMPUTE 24 16 12 16
//!HOOK LUMA
//!BIND conv2d_2
//!SAVE conv2d_3
//!WIDTH LUMA.w 2.0 *
//!HEIGHT LUMA.h 1.0 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif

const ivec2 ksize = ivec2(3, 3);
const ivec2 offset = ksize / 2;
const ivec2 wg_size = ivec2(gl_WorkGroupSize);
const ivec2 isize = wg_size + ksize - 1;
shared V4 inp[2][isize.y][isize.x];
void hook() {
    const uvec2 local_xy = gl_LocalInvocationID.xy;
    ivec2 base = ivec2(gl_WorkGroupID) * wg_size;
    for (uint y = local_xy.y; y < isize.y; y += wg_size.y) {
        for (uint x = local_xy.x; x < isize.x; x += wg_size.x) {
            const ivec2 input_base = (base + ivec2(x,y) - offset) * ivec2(2, 1);
            inp[0][y][x] = V4(conv2d_2_mul * texelFetch(conv2d_2_raw, input_base + ivec2(0, 0), 0));
            inp[1][y][x] = V4(conv2d_2_mul * texelFetch(conv2d_2_raw, input_base + ivec2(1, 0), 0));
        }
    }

    barrier();
    V4 result0 = V4(-0.0050631533, -0.0020272508, 0.062995605, -0.0323838);
    V4 result1 = V4(0.008567153, 0.008043188, -0.003998984, -0.021925705);
    const V4 inp_0_0_0 = inp[0][local_xy.y + 0][local_xy.x + 0];
    const V4 inp_0_1_0 = inp[0][local_xy.y + 0][local_xy.x + 1];
    const V4 inp_0_2_0 = inp[0][local_xy.y + 0][local_xy.x + 2];
    const V4 inp_0_0_1 = inp[0][local_xy.y + 1][local_xy.x + 0];
    const V4 inp_0_1_1 = inp[0][local_xy.y + 1][local_xy.x + 1];
    const V4 inp_0_2_1 = inp[0][local_xy.y + 1][local_xy.x + 2];
    const V4 inp_0_0_2 = inp[0][local_xy.y + 2][local_xy.x + 0];
    const V4 inp_0_1_2 = inp[0][local_xy.y + 2][local_xy.x + 1];
    const V4 inp_0_2_2 = inp[0][local_xy.y + 2][local_xy.x + 2];
    result0 += M4(-0.012420631, 0.024917433, 0.0146633005, 0.05711693, 0.27004898, -0.106246695, 0.2453381, -0.0042373147, 0.15681906, 0.023782171, 0.07695442, -0.0012761644, 0.05533443, -0.044910558, 0.032967035, 0.0069592395) * inp_0_0_0;
    result0 += M4(0.043678444, 0.053237412, -0.12928167, 0.030144973, -0.26520503, -0.19238496, 0.027534511, -0.17426118, -0.475347, -0.017527696, -0.09042184, -0.1324484, -0.21141323, -0.08587709, -0.09966602, -0.034919564) * inp_0_1_0;
    result0 += M4(0.11572131, 0.06832951, 0.091407485, -0.022946361, -0.087284796, -0.13839607, 0.1303592, -0.12797856, 0.05950968, -0.005576699, -0.002104289, 0.032372825, -0.010662721, -0.04247703, 0.094867714, -0.0037752406) * inp_0_2_0;
    result0 += M4(0.13138285, 0.031873748, 0.05271223, -0.007653563, -0.44289958, 0.095504, 0.15904531, 0.08804229, -0.4069151, -0.0045453445, -0.07902773, 0.047026265, 0.1109409, 0.012896836, 0.09791117, -0.014366949) * inp_0_0_1;
    result0 += M4(-0.21939497, -0.14435017, 0.29339737, -0.13172816, -0.6572156, 0.5679825, -1.1075928, 0.21656844, 0.6024033, 0.63817936, 0.18801573, 0.6562919, -0.3332446, 0.06294494, -0.53958356, -0.053950466) * inp_0_1_1;
    result0 += M4(-0.021619542, 0.10256607, -0.008216679, -0.42214984, 0.1330354, -0.17529798, -0.44265553, 0.039214317, 0.0328498, -0.13126132, -0.015486351, -0.012483675, -0.040530905, -0.18175343, -0.029047586, -0.025921132) * inp_0_2_1;
    result0 += M4(-0.070980445, -0.016500931, -0.027331686, -0.04494901, -0.08524794, -0.009585992, 0.04389413, -0.014250781, 0.026825134, -0.2999009, -0.26481304, 0.048204437, -0.047737073, -0.119850636, -0.017416041, 0.010970707) * inp_0_0_2;
    result0 += M4(-0.04615113, -0.3323098, -0.38879624, -0.052073475, 0.079712816, 0.42065006, 0.056846615, 0.15561329, 0.06508954, -0.4002454, 0.28517118, 0.009173021, -0.08803854, 0.21234478, -0.16013323, 0.1712624) * inp_0_1_2;
    result0 += M4(-1.3529257, -2.3783534, -0.2800223, 0.3201817, 0.028971665, 0.3776636, -0.042521343, 0.07375385, -0.07900492, 0.18498337, -0.023176536, 0.025223399, 0.027578881, 0.004664563, 0.14809386, -0.0116983745) * inp_0_2_2;
    result1 += M4(-0.020298488, 0.012331421, 0.030842379, 0.08739889, -0.16112979, -0.101961225, -0.11285795, -0.052390393, 0.028451405, 0.0039708405, -0.079758644, 0.00023607742, 0.09242144, -0.027947737, 0.086521365, -0.0074357875) * inp_0_0_0;
    result1 += M4(0.027683306, -0.0014540023, 0.063051224, -0.01692276, 0.06638762, 0.19699469, 0.02598844, 0.2708916, -0.010149757, 0.17969559, -0.065008335, -0.040203463, -0.043044526, 0.00471789, 0.105060674, 0.0084040845) * inp_0_1_0;
    result1 += M4(-0.08204893, 0.11182053, -0.24988541, 0.030761879, 0.025548639, -0.03524391, -0.09645154, -0.009764678, 0.042714555, -0.020518985, -0.011226781, 0.005213974, 0.05823686, -0.21305731, 0.17828886, -0.1355691) * inp_0_2_0;
    result1 += M4(-0.08107935, 0.0073987227, -0.16272148, 0.031040551, -0.038446583, 0.06375248, 0.13466033, -0.10811011, -0.07030793, -0.075064056, 0.024121633, -0.17926171, 0.30813208, 0.10770093, 0.2629372, 0.06172881) * inp_0_0_1;
    result1 += M4(-0.11733747, -0.13635834, -0.22203968, -0.19989571, -0.013333035, 0.6182757, 0.12487365, 0.32626382, 0.57944465, -0.046358652, 0.6376613, 0.5718518, 0.032409232, 0.5768307, 0.23248245, 0.40384552) * inp_0_1_1;
    result1 += M4(0.07087242, 0.8921268, -0.32887587, 0.9132832, 0.009174452, 0.24810612, 0.24349014, 0.12233239, -0.21118794, 0.07798875, 0.03201626, 0.080397345, -0.1644666, 0.011762294, 0.24595347, -0.010306309) * inp_0_2_1;
    result1 += M4(0.18065965, -0.05680449, 0.14270851, -0.04536001, -0.31710702, -0.035889965, -0.2523879, -0.08920549, -0.5936873, 0.07808885, 0.1419272, 0.018875502, 0.27929217, 0.11452615, -0.06736545, 0.04323081) * inp_0_0_2;
    result1 += M4(-0.6828722, 0.08629391, 0.28983152, -0.075459704, -1.2354448, -0.014451831, -0.4538658, -0.07634776, -0.029690696, -0.22092684, -0.63574433, 0.059641678, -1.0800047, 0.2061092, -0.23260874, 0.1191154) * inp_0_1_2;
    result1 += M4(-1.2734933, -1.0489516, -0.9963043, -0.15124255, 0.24947023, -0.098996386, -0.35604396, -0.09115665, 0.26135507, -0.007845802, -0.050190214, -0.10451881, 0.32235798, -0.057006072, -0.079740115, -0.018942047) * inp_0_2_2;
    const V4 inp_1_0_0 = inp[1][local_xy.y + 0][local_xy.x + 0];
    const V4 inp_1_1_0 = inp[1][local_xy.y + 0][local_xy.x + 1];
    const V4 inp_1_2_0 = inp[1][local_xy.y + 0][local_xy.x + 2];
    const V4 inp_1_0_1 = inp[1][local_xy.y + 1][local_xy.x + 0];
    const V4 inp_1_1_1 = inp[1][local_xy.y + 1][local_xy.x + 1];
    const V4 inp_1_2_1 = inp[1][local_xy.y + 1][local_xy.x + 2];
    const V4 inp_1_0_2 = inp[1][local_xy.y + 2][local_xy.x + 0];
    const V4 inp_1_1_2 = inp[1][local_xy.y + 2][local_xy.x + 1];
    const V4 inp_1_2_2 = inp[1][local_xy.y + 2][local_xy.x + 2];
    result0 += M4(-0.035334602, 0.049833134, -0.0037385763, 0.03519988, -0.11126474, 0.008393643, -0.015873777, 0.01814647, 0.032891564, -0.0035442787, 0.017224366, 0.0007665831, 0.0494928, 0.06234364, 0.090267085, 0.0033765887) * inp_1_0_0;
    result0 += M4(0.2615131, 0.25879067, -0.018655336, 0.19125748, 0.06981499, 0.13912314, 0.09003919, 0.09452647, 0.028659115, -0.014516227, 0.026688026, -0.05092609, 0.29558104, 0.08240365, -0.04980553, -0.030636601) * inp_1_1_0;
    result0 += M4(0.26448438, -0.03004654, 0.062407758, 0.03708571, 0.12582664, -0.0076450747, 0.11615913, 0.038278956, -0.07285198, -0.050245512, -0.07576864, -0.039085213, -0.022729589, 0.063667364, -0.037840955, 0.02213482) * inp_1_2_0;
    result0 += M4(0.18624459, 0.1703065, -0.20857522, 0.123712525, 0.12986407, 0.060332052, -0.021228923, 0.016532855, -0.122317895, -0.010620926, 0.049208798, -0.018676898, 0.04553216, 0.07877706, 0.09007656, -0.022942683) * inp_1_0_1;
    result0 += M4(0.26538587, -0.063224666, 0.26501566, 0.052884273, 0.12821314, 0.31032482, 0.23338377, 0.0041042184, -0.0040487656, -0.39120498, 0.24523371, -0.12836462, -0.43071032, -0.18410063, -0.07726691, -0.00396382) * inp_1_1_1;
    result0 += M4(0.16407666, 0.10944873, -0.15002379, 0.0059928335, 0.05857265, 0.1120708, 0.051460523, -0.030965103, -0.11087851, 0.035734545, 0.060844105, 0.09941566, -0.072692625, -0.25761887, 0.040734183, -0.031029006) * inp_1_2_1;
    result0 += M4(0.14847487, 0.14767031, 0.16574588, 0.014564642, 0.013053734, -0.023005614, 0.056306977, -0.013703585, 0.05468913, -0.0904645, -0.10758472, 0.016201204, 0.014014783, 0.17028554, 0.015947642, -0.039070603) * inp_1_0_2;
    result0 += M4(0.10640453, -0.11037729, 0.07813328, 0.06457949, 0.02639429, -0.06550545, 0.025569137, 0.018029056, -0.07267294, 0.3630181, 0.20769168, -0.016034052, -0.1716367, -0.26277655, -0.3970425, -0.024345895) * inp_1_1_2;
    result0 += M4(0.0022736199, 0.22195582, 0.050280783, 0.016225547, -0.07319887, 0.20687486, 0.06368008, -0.042924933, -0.0044125267, -0.13128877, 0.104173854, 0.0046883784, 0.08208649, 0.1531748, -0.12366149, -0.02030754) * inp_1_2_2;
    result1 += M4(-0.091017, 0.00791952, 0.027687136, 0.0016306054, 0.027298946, 0.02181828, 0.0021845386, -8.297401e-05, 0.07078634, -0.031124616, -0.074586436, -0.011598758, 0.041421328, 0.0066245366, 0.014842994, 0.016094845) * inp_1_0_0;
    result1 += M4(0.15702868, 0.006617577, 0.19114187, -0.04349416, 0.10701383, -0.02066529, 0.10447107, 0.049973622, 0.022399584, 0.051564083, 0.08413639, 0.0628957, 0.22895195, 0.16995911, 0.39550063, -0.12676923) * inp_1_1_0;
    result1 += M4(-0.11358285, -0.010251316, 0.05700093, 0.08924614, -0.015965056, -0.035057887, -0.0030413521, 0.04732647, -0.035600632, 0.08395777, -0.03039336, 0.15693104, 0.18537815, 0.066442564, 0.118631326, -0.02843488) * inp_1_2_0;
    result1 += M4(-0.013582094, 0.22244868, 0.056239538, 0.209988, 0.08133291, 0.05892888, 0.024196964, 0.07049337, 0.04546993, -0.018310947, -0.01771198, -0.116946556, -0.00057696283, 0.031904496, 0.062245898, 0.032730743) * inp_1_0_1;
    result1 += M4(-0.67455584, 0.17221333, -0.22330976, 0.16488907, 0.097817004, 0.45852166, -0.18502805, 0.108567335, -0.30841368, -0.29625574, -0.19938849, 0.21399423, -0.8641888, 0.447262, -0.6794077, 0.045933224) * inp_1_1_1;
    result1 += M4(-0.23415065, 0.22510388, 0.05762637, 0.15542994, 0.07348792, 0.1319324, -0.11263441, 0.08548326, -0.039310038, -0.2555132, 0.12128794, -0.038757622, -0.114169694, -0.26437193, -0.1386033, -0.14441118) * inp_1_2_1;
    result1 += M4(-0.17275946, 0.037343394, 0.08451387, 0.076835744, -0.016045803, -0.05935524, -0.19093734, -0.026532562, -0.08650332, 0.038013965, 0.05124481, 0.0052429633, 0.2549737, -0.16056255, -0.23991859, -0.069139615) * inp_1_0_2;
    result1 += M4(-0.39819908, 0.17075038, 0.22140083, -0.00064388936, -0.24797758, -0.055756036, -0.015524549, -0.13071889, 0.8301588, 0.04970612, -0.053084295, 0.073442996, -1.0126886, 0.11938269, -0.65945584, 0.016475165) * inp_1_1_2;
    result1 += M4(0.12255406, 0.14805737, -0.1066661, 0.020471513, 0.19831425, 0.06120599, -0.1272459, -0.0037228032, 0.2787543, -0.2503507, 0.022427807, -0.014324142, -0.09255354, 0.09013909, -0.23437557, 0.0023948771) * inp_1_2_2;
    const ivec2 output_base = ivec2(gl_GlobalInvocationID) * ivec2(2, 1);
    imageStore(out_image, output_base + ivec2(0, 0), max(result0, V4(0.0)));
    imageStore(out_image, output_base + ivec2(1, 0), max(result1, V4(0.0)));
}

//!DESC ArtCNN C4F8 DS (Conv2D-4-ReLU)
//!COMPUTE 24 16 12 16
//!HOOK LUMA
//!BIND conv2d_3
//!SAVE conv2d_4
//!WIDTH LUMA.w 2.0 *
//!HEIGHT LUMA.h 1.0 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif

const ivec2 ksize = ivec2(3, 3);
const ivec2 offset = ksize / 2;
const ivec2 wg_size = ivec2(gl_WorkGroupSize);
const ivec2 isize = wg_size + ksize - 1;
shared V4 inp[2][isize.y][isize.x];
void hook() {
    const uvec2 local_xy = gl_LocalInvocationID.xy;
    ivec2 base = ivec2(gl_WorkGroupID) * wg_size;
    for (uint y = local_xy.y; y < isize.y; y += wg_size.y) {
        for (uint x = local_xy.x; x < isize.x; x += wg_size.x) {
            const ivec2 input_base = (base + ivec2(x,y) - offset) * ivec2(2, 1);
            inp[0][y][x] = V4(conv2d_3_mul * texelFetch(conv2d_3_raw, input_base + ivec2(0, 0), 0));
            inp[1][y][x] = V4(conv2d_3_mul * texelFetch(conv2d_3_raw, input_base + ivec2(1, 0), 0));
        }
    }

    barrier();
    V4 result0 = V4(-0.030580346, -0.015006102, 0.0011947277, 0.0048361844);
    V4 result1 = V4(-0.01770313, -0.01679495, -0.040613186, -0.077726945);
    const V4 inp_0_0_0 = inp[0][local_xy.y + 0][local_xy.x + 0];
    const V4 inp_0_1_0 = inp[0][local_xy.y + 0][local_xy.x + 1];
    const V4 inp_0_2_0 = inp[0][local_xy.y + 0][local_xy.x + 2];
    const V4 inp_0_0_1 = inp[0][local_xy.y + 1][local_xy.x + 0];
    const V4 inp_0_1_1 = inp[0][local_xy.y + 1][local_xy.x + 1];
    const V4 inp_0_2_1 = inp[0][local_xy.y + 1][local_xy.x + 2];
    const V4 inp_0_0_2 = inp[0][local_xy.y + 2][local_xy.x + 0];
    const V4 inp_0_1_2 = inp[0][local_xy.y + 2][local_xy.x + 1];
    const V4 inp_0_2_2 = inp[0][local_xy.y + 2][local_xy.x + 2];
    result0 += M4(-0.11119369, -0.023623707, -0.10638811, -0.03813347, 0.15732509, 0.0052429345, 0.5735892, -0.09857339, -0.088618696, -0.0032300195, -0.03849232, -0.0655024, -0.15231209, 0.0377784, -0.20290357, 0.19144702) * inp_0_0_0;
    result0 += M4(0.12502885, 0.018629996, -0.006123955, -0.004700613, 0.36287078, 0.003534197, 0.0096962815, -0.03326525, -0.1669495, -0.017198728, -0.06613246, 0.07308828, -0.5784966, -0.04425965, 0.05374808, -0.033191327) * inp_0_1_0;
    result0 += M4(-0.044731952, 0.0053421278, -0.044799995, 0.034256566, 0.14347811, -0.013359388, -0.01414316, 0.028831525, -0.18989292, -0.016962636, 0.0055920244, 0.0063876123, -0.15652122, 0.006638649, 0.0038120467, 0.0072778882) * inp_0_2_0;
    result0 += M4(0.113328256, -0.017009584, 0.119325496, 0.014617277, 0.27219725, 0.03509103, 0.71598214, 0.2945831, 0.07203204, 0.007032525, -0.087192625, 0.070311956, 0.15413925, -0.036107905, 0.20443887, -0.40579984) * inp_0_0_1;
    result0 += M4(0.050213624, -0.002611892, 0.040317707, -0.3797932, 0.20318949, -0.12204273, -0.054966614, 0.31285253, 0.2550015, -0.046027277, 0.075889796, -0.28524116, 0.92248994, 0.2267942, 0.2533449, -0.384036) * inp_0_1_1;
    result0 += M4(-0.12481614, 0.043369077, 0.005942089, 0.079630695, 0.14657713, 0.08652986, -0.009274354, 0.036564026, -0.019873755, 0.094097815, -0.05510016, -0.06787952, 0.019430837, -0.22945796, -0.004945944, 0.028391572) * inp_0_2_1;
    result0 += M4(-0.003994693, -0.10134869, -2.212734, 0.076797806, -0.16884068, 0.060010172, -3.1086285, 0.0068274904, 0.12614438, 0.0067808433, -0.840456, -0.08428498, 0.03470651, 0.053826943, -5.116199, 0.33490345) * inp_0_0_2;
    result0 += M4(0.3101803, 0.06806396, -0.190283, 0.48253107, -0.10481658, 0.028980825, -0.04640797, -0.030745834, 0.10905498, 0.06744112, 0.033241887, 0.13642932, -0.06167761, 0.20674267, 0.3105129, 0.57322323) * inp_0_1_2;
    result0 += M4(-0.019296298, 0.10930723, 0.08196336, 0.09202667, -0.06957413, 0.0075254226, 0.010288027, 0.063527696, 0.14364722, 0.12444993, -0.033547185, 0.02040087, 0.18860751, -0.42467955, -0.03457273, 0.04400852) * inp_0_2_2;
    result1 += M4(-0.023252796, -0.0052726967, -0.0801239, -0.02405903, 0.07059002, -0.016305799, -0.036362763, 0.046313245, 0.032280896, -0.0112160705, 0.114899136, 0.0075182943, -0.47614035, 0.034812607, 0.19929375, -0.08272627) * inp_0_0_0;
    result1 += M4(0.07559738, -0.025008189, 0.056655414, -0.1647984, 0.070273444, -0.056970753, -0.09659002, 0.20114726, 0.022710798, -0.066058785, 0.23828039, 0.083073035, -0.11338305, 0.063591585, -0.3083362, -0.110425256) * inp_0_1_0;
    result1 += M4(0.018988336, -0.0127999615, -0.041363683, 0.0010638478, 0.08231451, 0.049731985, 0.17997941, -0.12545668, 0.015479949, -0.03055718, -0.04050829, 0.09697154, -0.064299725, -0.031894125, -0.029567195, 0.15426156) * inp_0_2_0;
    result1 += M4(0.0076826504, -0.00605406, -0.14977302, 0.004182596, -0.0235156, 0.08666715, 0.0766047, -0.22492318, 0.02138188, 0.040650494, 0.30707425, -0.14174393, 0.107454985, -0.13844296, 0.35370404, 0.3532064) * inp_0_0_1;
    result1 += M4(-0.036587987, -0.02841981, 0.7312838, -0.34138292, -0.052062213, 0.42292726, -0.16804904, 0.71159166, -0.01243972, 0.028456874, -0.16073011, 0.99168855, -0.10264081, -0.27053007, -0.9762422, -0.5556453) * inp_0_1_1;
    result1 += M4(0.012427771, -0.06564293, -0.3839576, 0.19840637, -0.007635158, 0.09224093, 0.038930982, -0.17888525, 0.018629616, -0.019360084, 0.20834997, -0.08039594, -0.0154448915, 0.019311203, 0.3126979, 0.039491415) * inp_0_2_1;
    result1 += M4(-0.0073031927, 0.017773282, -0.075039096, 0.16670951, -0.0059175184, -0.030183667, 0.056355495, 0.063793525, -0.022812665, 0.02003967, -0.021720907, 0.052382555, -0.01611902, 0.121792756, -0.0011377514, -0.31700018) * inp_0_0_2;
    result1 += M4(0.032474108, 0.22418852, 0.00058395264, -0.32797435, 0.020163935, -0.3727463, -0.0060835397, -0.085037455, -0.0109206075, 0.16559774, 0.057128422, 0.33971432, -0.04127911, 0.5214777, -0.046954397, 0.5957936) * inp_0_1_2;
    result1 += M4(0.0068365047, 0.29862526, -0.04218555, 0.14788452, 0.023104113, -0.047948185, 0.031432617, 0.14693773, -0.03092387, 0.074287094, -0.045805708, -0.1850863, -0.019995345, 0.10230276, 0.10118373, -0.36582553) * inp_0_2_2;
    const V4 inp_1_0_0 = inp[1][local_xy.y + 0][local_xy.x + 0];
    const V4 inp_1_1_0 = inp[1][local_xy.y + 0][local_xy.x + 1];
    const V4 inp_1_2_0 = inp[1][local_xy.y + 0][local_xy.x + 2];
    const V4 inp_1_0_1 = inp[1][local_xy.y + 1][local_xy.x + 0];
    const V4 inp_1_1_1 = inp[1][local_xy.y + 1][local_xy.x + 1];
    const V4 inp_1_2_1 = inp[1][local_xy.y + 1][local_xy.x + 2];
    const V4 inp_1_0_2 = inp[1][local_xy.y + 2][local_xy.x + 0];
    const V4 inp_1_1_2 = inp[1][local_xy.y + 2][local_xy.x + 1];
    const V4 inp_1_2_2 = inp[1][local_xy.y + 2][local_xy.x + 2];
    result0 += M4(0.04661231, -0.02811159, -0.29551512, 0.17282294, -0.09949564, 0.012604413, -0.35424638, 0.016150247, 0.3412258, -0.0013304808, 0.15120794, 0.16909143, 0.02742452, -0.036582913, 0.11148552, 8.598213e-05) * inp_1_0_0;
    result0 += M4(0.48665422, 0.038677536, -0.08943256, 0.059522126, -0.26493055, 0.0128081115, -0.09112821, 0.20555931, 0.5478553, 0.0039292867, -0.008393274, 0.44581547, 0.029857187, 0.017747758, 0.09862425, -0.12811424) * inp_1_1_0;
    result0 += M4(-0.05694432, 0.027678352, 0.047965933, -0.067633405, -0.1906012, -0.015318709, 0.01685582, -0.051839393, 0.30535302, -0.025752084, 0.0096577685, 0.0111026615, 0.1436051, 0.014371666, -0.013656095, 0.014293535) * inp_1_2_0;
    result0 += M4(-0.22525889, -0.044894177, -0.02144881, -0.121493414, -0.10610464, 0.013250726, -0.7948238, 0.13189514, -0.12354394, 0.04377067, -0.5490816, 0.1085632, -0.14913061, -0.029629242, -0.37156624, -0.18381752) * inp_1_0_1;
    result0 += M4(-0.09202861, 0.101143904, 0.00386815, -0.056471985, -0.41594622, 0.06380394, 0.01029408, -0.66072905, -0.42140135, -0.07308768, 0.109470256, -0.11806561, 0.521585, 0.010811179, 0.15209103, 0.41753986) * inp_1_1_1;
    result0 += M4(-0.005208046, 0.003724581, 0.0099643115, 0.0075097047, 0.0147303, -0.24670547, -0.01047271, -0.04159053, 0.100108005, -0.019204628, -0.011684433, 0.14920066, -0.03356954, 0.14248055, -0.029831782, 0.019899644) * inp_1_2_1;
    result0 += M4(0.051208146, -0.027907316, -0.6385822, -0.034186292, 0.063166216, 0.046589524, -0.5429404, -0.34853107, 0.08184171, -0.0358636, -1.0859363, 0.1678211, -0.10711638, -0.100135826, -0.12440927, 0.018035674) * inp_1_0_2;
    result0 += M4(0.079496585, 0.0010394483, -0.025591537, 0.040388413, 0.39239174, -0.17273879, -0.04636888, 0.18934962, 0.051642966, 0.0062953928, 0.041086536, 0.104074776, -0.903558, 0.24211739, 0.026272338, -0.6456617) * inp_1_1_2;
    result0 += M4(0.0037132301, -0.01232589, -0.009098225, -0.0009158066, 0.12421, -0.0676932, -0.013894691, 0.027901042, 0.021066884, -0.015162945, -0.0037445421, 0.05526578, -0.23021574, -0.0030170348, 0.0053735236, -0.16089904) * inp_1_2_2;
    result1 += M4(-0.06917949, 0.044059437, -0.015759097, 0.008176327, 0.039808497, 0.03091261, 0.21517898, 0.0003733808, 0.011763347, 0.04029691, -0.02900405, -0.2859552, 0.16506888, -0.02470406, -0.20746578, 0.05193425) * inp_1_0_0;
    result1 += M4(-0.069044165, 0.079041354, 0.28280845, -0.08704877, -0.23322195, 0.03183609, -0.5521612, -0.22362974, -0.091345936, -0.20400743, -0.1385498, 0.34964663, 0.32131386, 0.012098325, 0.4878979, -0.003692793) * inp_1_1_0;
    result1 += M4(-0.03818429, -0.03333645, -0.20344378, -0.043597255, -0.061678693, -0.07326202, 0.00040549788, 0.051525332, -0.028527454, 0.06737786, 0.15739259, -0.16191885, 0.046119142, 0.041242864, -0.070546575, 0.06625089) * inp_1_2_0;
    result1 += M4(0.0037391845, -0.054046907, -0.052761868, 0.062523015, 0.07410379, -0.044025566, -0.070777446, -0.3514989, -0.014118815, 0.09579748, -0.055021357, -0.07113333, -0.028501771, 0.022335917, 0.007045925, 0.20124425) * inp_1_0_1;
    result1 += M4(0.03328042, -0.20178793, 0.13144486, -0.37765446, 0.04354459, -0.33726817, -0.48324987, 0.31012708, 0.025812462, 0.3069702, -0.043099605, -0.19552937, 0.054119512, 0.23680195, 0.2634157, -0.30710775) * inp_1_1_1;
    result1 += M4(-0.0011423811, -0.000544272, -0.04943389, 0.2946209, 0.031959124, -0.07862382, 0.1230445, -0.1444474, 0.014783536, 0.085118875, 0.08984877, 0.029397478, -0.05459473, 0.026260337, -0.017776819, 0.18266173) * inp_1_2_1;
    result1 += M4(0.007150008, -0.025221476, -0.039086506, -0.10051742, -0.0022474297, -0.07879171, -0.025267027, -0.07625888, -0.011436695, 0.14953512, -0.004314505, -0.0039892155, -0.021178924, -0.05037657, -0.14348428, 0.22488192) * inp_1_0_2;
    result1 += M4(3.561943e-05, 0.20911221, -0.029127473, 0.028278299, -0.012470315, 0.1285472, -2.9672667e-05, -0.06158141, -0.031877376, 0.2400302, -0.02940865, -0.04305279, 0.055103526, -0.78754115, 0.30447474, -0.4889635) * inp_1_1_2;
    result1 += M4(-0.0046457998, 0.0031220245, -0.025483483, -0.007891277, -0.0024286753, 0.023149366, 0.03393487, -0.08273222, 0.02732111, 0.09168448, 0.0037634934, -0.009690589, -0.024221508, -0.27374426, -0.18990819, 0.22980866) * inp_1_2_2;
    const ivec2 output_base = ivec2(gl_GlobalInvocationID) * ivec2(2, 1);
    imageStore(out_image, output_base + ivec2(0, 0), max(result0, V4(0.0)));
    imageStore(out_image, output_base + ivec2(1, 0), max(result1, V4(0.0)));
}

//!DESC ArtCNN C4F8 DS (Conv2D-5)
//!COMPUTE 24 16 12 16
//!HOOK LUMA
//!BIND conv2d_4
//!SAVE conv2d_5
//!WIDTH LUMA.w 2.0 *
//!HEIGHT LUMA.h 1.0 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif

const ivec2 ksize = ivec2(3, 3);
const ivec2 offset = ksize / 2;
const ivec2 wg_size = ivec2(gl_WorkGroupSize);
const ivec2 isize = wg_size + ksize - 1;
shared V4 inp[2][isize.y][isize.x];
void hook() {
    const uvec2 local_xy = gl_LocalInvocationID.xy;
    ivec2 base = ivec2(gl_WorkGroupID) * wg_size;
    for (uint y = local_xy.y; y < isize.y; y += wg_size.y) {
        for (uint x = local_xy.x; x < isize.x; x += wg_size.x) {
            const ivec2 input_base = (base + ivec2(x,y) - offset) * ivec2(2, 1);
            inp[0][y][x] = V4(conv2d_4_mul * texelFetch(conv2d_4_raw, input_base + ivec2(0, 0), 0));
            inp[1][y][x] = V4(conv2d_4_mul * texelFetch(conv2d_4_raw, input_base + ivec2(1, 0), 0));
        }
    }

    barrier();
    V4 result0 = V4(-0.0045084087, -0.0681612, -0.07848648, -0.050937943);
    V4 result1 = V4(-0.043724254, -0.051773828, 0.043612886, 0.022447212);
    const V4 inp_0_0_0 = inp[0][local_xy.y + 0][local_xy.x + 0];
    const V4 inp_0_1_0 = inp[0][local_xy.y + 0][local_xy.x + 1];
    const V4 inp_0_2_0 = inp[0][local_xy.y + 0][local_xy.x + 2];
    const V4 inp_0_0_1 = inp[0][local_xy.y + 1][local_xy.x + 0];
    const V4 inp_0_1_1 = inp[0][local_xy.y + 1][local_xy.x + 1];
    const V4 inp_0_2_1 = inp[0][local_xy.y + 1][local_xy.x + 2];
    const V4 inp_0_0_2 = inp[0][local_xy.y + 2][local_xy.x + 0];
    const V4 inp_0_1_2 = inp[0][local_xy.y + 2][local_xy.x + 1];
    const V4 inp_0_2_2 = inp[0][local_xy.y + 2][local_xy.x + 2];
    result0 += M4(-0.016634967, -0.0498608, 0.0017443211, -0.0003601552, 0.002266282, 0.40137887, -0.3774327, 2.9460534e-06, 0.047326468, -0.04927928, -0.01906779, 0.058275614, 0.03554038, -0.04852741, 0.020974904, -0.017170882) * inp_0_0_0;
    result0 += M4(-0.024155544, 0.10733727, -0.10532819, 0.0002762421, 0.052964617, -0.22850661, 0.365311, 0.06255947, 0.12920661, -0.031859044, -0.26693064, 0.13221695, -0.0031245493, -0.010958743, 0.037004694, 0.0050427304) * inp_0_1_0;
    result0 += M4(-0.0044345562, -0.0060046073, 0.05708347, -0.0020568343, 0.002125272, -0.039075363, -0.02150147, -0.0045703594, -0.14068276, 0.80868363, -0.3246306, 0.051066693, 0.031133758, 0.024659237, -0.022918507, 0.017492045) * inp_0_2_0;
    result0 += M4(0.15228839, 0.041376837, -0.26287767, 0.111726865, -0.11777348, -0.117378496, 0.20037802, -0.17335774, 0.025666965, 0.05346301, 0.00654095, -0.051150765, 0.047016725, 0.09956259, -0.11551585, 0.14641987) * inp_0_0_1;
    result0 += M4(-0.29847476, -0.354979, 0.5901479, -0.21623184, 0.009458771, -0.31664985, -0.052220162, 0.1526691, 0.51892656, 0.532752, -0.0969865, 0.21906245, -0.05910096, -0.20947959, 0.37028536, -0.8067415) * inp_0_1_1;
    result0 += M4(-0.019731587, 0.0720247, -0.015907528, -0.017543375, 0.0042600497, 0.10765768, -0.014751891, -0.014582254, -0.08606377, 0.17979546, -0.6247734, 0.079917505, -0.08278386, -0.5805921, -0.04464871, 0.107333384) * inp_0_2_1;
    result0 += M4(0.033021495, 0.008828363, -0.07335552, -0.024432147, 0.0028497651, -0.020203736, 0.003805602, -0.044486005, 0.010109772, 0.030461833, -0.016104942, 0.013875356, 0.0044596465, 0.011396892, -0.03727328, 0.046398006) * inp_0_0_2;
    result0 += M4(-0.0051600426, 0.21066007, 0.14091186, -0.09880165, -0.029488645, -0.06321544, -0.00863923, -0.009163864, -0.021100128, -0.07483171, 0.0590617, -0.22986427, -0.0340804, -0.008144043, -0.062771246, -0.07563531) * inp_0_1_2;
    result0 += M4(0.0032651268, 0.035832733, -0.03341172, -0.013199746, 0.00784606, -0.011097563, -0.01220358, 0.006527179, 0.08224906, 0.038144186, -0.09304596, 0.11183065, 0.016508948, -0.0036178373, -0.05533699, -0.00096123794) * inp_0_2_2;
    result1 += M4(0.014138431, 0.0033924824, -0.038343053, -0.0015546944, -0.24675058, -0.39966562, 0.049499456, 0.31869355, -0.029919412, 0.12036761, -0.039749097, -0.057162445, -0.007587854, 0.095303304, 0.034883704, -0.081503145) * inp_0_0_0;
    result1 += M4(-0.04874072, -0.020765977, 0.076477766, -0.004375748, -0.28745723, 0.3901798, -0.09518846, -0.15349254, -0.1687672, 0.35343733, -0.10231756, -0.0873874, 0.103719436, -0.103007115, 0.04849136, 0.12407178) * inp_0_1_0;
    result1 += M4(0.020530827, -0.043688618, 0.0069571063, 0.0039257943, -0.07588019, -0.06297282, 0.03577607, -0.037794866, -0.07544197, 0.74733275, -0.27363345, -0.06727077, -0.048711907, 0.045926347, -0.009096497, 0.014332883) * inp_0_2_0;
    result1 += M4(-0.197717, 0.30351123, 0.0029494816, -0.13978894, 0.12875327, -0.11113606, 0.1508586, -0.17636046, -0.07102533, 0.011681241, 0.13198532, -0.041732028, -0.1332994, 0.11852544, -0.05574031, -0.011445018) * inp_0_0_1;
    result1 += M4(-0.21329415, -1.0993571, 0.23581652, -0.23275012, 0.012244125, -0.14575964, -0.03083692, -0.17736132, -0.41997394, -0.21157084, 0.26515037, 0.039231844, 0.19544686, -0.7777061, 0.30419946, -0.14001657) * inp_0_1_1;
    result1 += M4(0.16755435, 0.115144506, -0.035841394, 0.11200126, 0.07150051, -0.055847988, -0.035278123, 0.0051444843, 1.239296, 0.7960818, -0.19263266, 0.4018544, 0.29796895, 0.054379158, -0.3080305, -0.20291112) * inp_0_2_1;
    result1 += M4(-0.016689487, 0.047877878, -0.0024129518, -0.010556584, 0.02602519, 0.011547113, 0.022037176, -0.024761671, -0.012146085, -0.0057757692, -0.001930607, 0.021761391, -0.029746154, 0.029185846, -0.032495786, 0.014950827) * inp_0_0_2;
    result1 += M4(-0.07264702, -0.03918309, -0.15496008, 0.021669216, -0.009075404, -0.022257766, -0.0029664321, -0.045228217, 0.063369274, -0.15195823, 0.25888377, 0.016306994, -0.015980337, -0.13199292, -0.043687843, -0.026789399) * inp_0_1_2;
    result1 += M4(-0.040976033, 0.16753148, -0.013934437, 0.066307634, 0.005206336, 0.035436373, 0.04436356, 0.022637095, -0.008412326, 0.7153004, 0.17926233, 0.32021478, -0.0962613, -0.06964939, -0.06921536, -0.0953904) * inp_0_2_2;
    const V4 inp_1_0_0 = inp[1][local_xy.y + 0][local_xy.x + 0];
    const V4 inp_1_1_0 = inp[1][local_xy.y + 0][local_xy.x + 1];
    const V4 inp_1_2_0 = inp[1][local_xy.y + 0][local_xy.x + 2];
    const V4 inp_1_0_1 = inp[1][local_xy.y + 1][local_xy.x + 0];
    const V4 inp_1_1_1 = inp[1][local_xy.y + 1][local_xy.x + 1];
    const V4 inp_1_2_1 = inp[1][local_xy.y + 1][local_xy.x + 2];
    const V4 inp_1_0_2 = inp[1][local_xy.y + 2][local_xy.x + 0];
    const V4 inp_1_1_2 = inp[1][local_xy.y + 2][local_xy.x + 1];
    const V4 inp_1_2_2 = inp[1][local_xy.y + 2][local_xy.x + 2];
    result0 += M4(-0.015243278, 0.034263037, 0.03732182, -0.03548882, -0.016757358, 0.044407018, 0.32935902, -0.05391455, 0.006132651, 0.026231734, -0.01802686, 0.024515642, 0.008163511, 0.036000118, 0.056299236, -0.04094483) * inp_1_0_0;
    result0 += M4(0.016744688, -0.09466956, -0.054663155, 0.03462636, 0.24603665, 0.7000476, -1.2012534, 0.42646384, 0.0148689095, 0.35046902, 0.17905353, -0.026082179, -0.030001832, -0.31120738, -0.13237983, -0.023765285) * inp_1_1_0;
    result0 += M4(0.0005335529, 0.06131368, -0.013114579, -0.00912007, 0.077223256, 0.34196347, 0.15007778, 0.004998648, 0.0040706187, -0.019879965, -0.013185247, 0.0041353316, -0.011378284, 0.13009968, -0.04963918, -0.010109467) * inp_1_2_0;
    result0 += M4(-0.06775284, -0.08319789, -0.056671545, -0.025273966, 0.11602037, -0.03821649, -0.019641802, 0.086848766, -0.115382135, -0.0059385034, 0.34964988, -0.26279047, 0.016387168, 0.03868279, -0.32082996, 0.3538944) * inp_1_0_1;
    result0 += M4(0.1540497, 0.08618504, 0.08289604, 0.021850372, -0.23119783, -0.23408002, -0.013112322, 0.5716762, -0.35332206, -0.8594558, 0.07765099, -0.023699718, 0.7064192, 1.0215006, -0.39461607, 0.46949327) * inp_1_1_1;
    result0 += M4(-0.043896075, -0.28713137, 0.0022618365, 0.036309686, 0.07801928, 0.7618802, 0.06558683, -0.07985604, 0.023352915, -0.057791978, -0.06283506, 0.065246165, -0.02794305, 0.1705391, 0.0057920082, -0.05381582) * inp_1_2_1;
    result0 += M4(-0.017843237, -0.02182709, -0.16371231, -0.018924326, -0.0040058815, -0.031695195, -0.030981462, -0.044807922, -0.05777324, -0.0685709, 0.096300036, -0.054944642, 0.0036606397, 0.0028797295, 0.068810955, -0.037604034) * inp_1_0_2;
    result0 += M4(-0.30456567, -0.7564635, 0.7176262, -0.08752704, 0.02695115, 0.18119983, 0.21123856, 0.05441288, 0.024813492, -0.17141356, -0.15469517, 0.062224723, -0.078435555, -0.106578715, 0.025327085, -0.067750655) * inp_1_1_2;
    result0 += M4(-0.001843033, 0.025767809, -0.042259965, -0.05060198, -0.0136773, -0.07461003, 0.028086554, 0.02223779, 0.020200158, -0.021882916, -0.051618405, 0.008618137, -0.028225241, 0.012498292, 0.07285166, -0.010472599) * inp_1_2_2;
    result1 += M4(0.028232157, -0.084811516, 0.04438747, 0.05744583, 0.22101854, -0.17155725, -0.16306695, 0.14611039, -0.05690012, -0.040650386, 0.028307054, -0.012796967, 0.087264426, 0.06410334, 0.026370445, 0.051430188) * inp_1_0_0;
    result1 += M4(-0.040773563, 0.08562891, -0.04196548, -0.086270556, 0.4843554, 1.599867, 0.37209842, 0.9249757, 0.17262197, -0.115553975, 0.108179174, 0.26532012, -0.10636443, 0.07210869, 0.13020498, -0.16921097) * inp_1_1_0;
    result1 += M4(0.02686576, 0.020352796, -0.0012497343, 0.03185817, -0.37043962, -0.10415149, -0.13239037, -0.09582174, -0.0122302305, 0.0022781726, -0.00107479, -0.012525583, 0.12176206, -0.006816331, 0.06017045, 0.092615776) * inp_1_2_0;
    result1 += M4(0.058110654, 0.062028583, -0.0574997, -0.06412932, 0.05451675, 0.10210353, -0.05203522, -0.09967696, 0.18376778, -0.4033726, 0.18282478, 0.12617019, -0.13408421, 0.15473014, -0.37567645, 0.039026517) * inp_1_0_1;
    result1 += M4(-0.26743272, -0.04289032, 0.19676684, -0.051342655, -0.2088683, 0.47493806, 0.19275558, 0.3480463, 1.2372811, 0.9606277, -0.66518015, 0.12234178, -1.2864888, 0.076674186, -0.26188058, -0.14622183) * inp_1_1_1;
    result1 += M4(-0.017288823, -0.07506098, -0.053811494, -0.107573986, -0.22905998, 0.009258567, 0.20399433, 0.24451911, 0.094482444, 0.17042251, -0.02922495, 0.04289535, -0.097346574, -0.20617753, -0.1976444, -0.06397219) * inp_1_2_1;
    result1 += M4(-0.11535266, -0.097079776, 0.041629948, -0.04561049, 0.043392252, 0.047955815, 0.024284085, 0.004199316, 0.07906515, -0.059114613, 0.048174176, -0.01714666, 0.016757898, -0.02282712, 0.05660401, -0.0016307788) * inp_1_0_2;
    result1 += M4(0.19320641, -0.21190494, -0.57634366, -0.4369534, -0.17527764, -0.014343393, -0.11775915, -0.059836693, 0.02490809, 0.07329501, 0.25909364, 0.013003762, 0.2211178, 0.051259927, 0.081993185, 0.06652592) * inp_1_1_2;
    result1 += M4(-0.4283977, -0.20091783, -0.0013538974, -0.26452532, 0.15561533, 0.046318725, 0.08434323, 0.06396036, 0.0595414, -0.054643244, 0.11304381, 0.052606966, 0.008964621, 0.024950951, -0.008147889, 0.03544605) * inp_1_2_2;
    const ivec2 output_base = ivec2(gl_GlobalInvocationID) * ivec2(2, 1);
    imageStore(out_image, output_base + ivec2(0, 0), result0);
    imageStore(out_image, output_base + ivec2(1, 0), result1);
}

//!DESC ArtCNN C4F8 DS (Conv2D-6)
//!COMPUTE 12 16 12 16
//!HOOK LUMA
//!BIND conv2d
//!BIND conv2d_5
//!SAVE conv2d_6
//!WIDTH LUMA.w 1.0 *
//!HEIGHT LUMA.h 1.0 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif

const ivec2 ksize = ivec2(3, 3);
const ivec2 offset = ksize / 2;
const ivec2 wg_size = ivec2(gl_WorkGroupSize);
const ivec2 isize = wg_size + ksize - 1;
shared V4 inp[2][isize.y][isize.x];
void hook() {
    const uvec2 local_xy = gl_LocalInvocationID.xy;
    ivec2 base = ivec2(gl_WorkGroupID) * wg_size;
    for (uint y = local_xy.y; y < isize.y; y += wg_size.y) {
        for (uint x = local_xy.x; x < isize.x; x += wg_size.x) {
            const ivec2 input_base = (base + ivec2(x,y) - offset) * ivec2(2, 1);
            inp[0][y][x] = V4(conv2d_5_mul * texelFetch(conv2d_5_raw, input_base + ivec2(0, 0), 0) + conv2d_mul * texelFetch(conv2d_raw, input_base + ivec2(0, 0), 0));
            inp[1][y][x] = V4(conv2d_5_mul * texelFetch(conv2d_5_raw, input_base + ivec2(1, 0), 0) + conv2d_mul * texelFetch(conv2d_raw, input_base + ivec2(1, 0), 0));
        }
    }

    barrier();
    V4 result0 = V4(0.11180085, 0.16244505, 0.14976975, 0.17217897);
    const V4 inp_0_0_0 = inp[0][local_xy.y + 0][local_xy.x + 0];
    const V4 inp_0_1_0 = inp[0][local_xy.y + 0][local_xy.x + 1];
    const V4 inp_0_2_0 = inp[0][local_xy.y + 0][local_xy.x + 2];
    const V4 inp_0_0_1 = inp[0][local_xy.y + 1][local_xy.x + 0];
    const V4 inp_0_1_1 = inp[0][local_xy.y + 1][local_xy.x + 1];
    const V4 inp_0_2_1 = inp[0][local_xy.y + 1][local_xy.x + 2];
    const V4 inp_0_0_2 = inp[0][local_xy.y + 2][local_xy.x + 0];
    const V4 inp_0_1_2 = inp[0][local_xy.y + 2][local_xy.x + 1];
    const V4 inp_0_2_2 = inp[0][local_xy.y + 2][local_xy.x + 2];
    result0 += M4(0.04695145, -0.06519071, -0.12974985, -0.13972965, -0.0154521065, 0.009855081, 0.018374152, 0.018585334, -0.12607558, 0.00856808, 0.018070644, 0.029683921, 0.14496967, -0.025687205, -0.031823475, -0.061769705) * inp_0_0_0;
    result0 += M4(0.26668227, 0.023149822, 0.19470899, 0.08053275, -0.05095432, -0.055128295, 0.03969407, 0.07087575, 0.004142866, 0.018999986, 0.0015731709, 0.025256611, 0.18747252, 0.015487785, -0.073634975, -0.074588805) * inp_0_1_0;
    result0 += M4(0.0017958375, 0.20019718, -0.040071536, 0.07400697, 0.03075677, -0.027201746, 0.02142408, 9.631874e-05, 0.009853102, -0.045731626, 0.016532712, -0.010643295, -0.054480392, -0.005726954, -0.059472688, -0.06676688) * inp_0_2_0;
    result0 += M4(-0.05034131, -0.1234617, 0.04255813, -0.010770756, -0.18170625, 0.13153619, -0.23182672, 0.1614336, 0.19369341, 0.025772315, 0.09256251, 0.040382173, 0.042643283, -0.05424802, 0.022840358, -0.1554934) * inp_0_0_1;
    result0 += M4(0.30914214, 0.4195351, 0.16904366, -0.029169513, 0.3125627, -0.052422564, 0.3679922, -0.08772542, 0.32640415, 0.7395783, 0.26311055, 0.4913047, 0.31138092, 0.22705019, 0.71998346, 0.54999167) * inp_0_1_1;
    result0 += M4(0.2694087, 0.07832406, 0.2597103, 0.2885638, -0.015630953, -0.050270066, 0.0018601165, -0.027903868, 0.067642584, 0.046539564, 0.06350224, 0.0053542783, -0.34873664, 0.0398105, -0.2646783, 0.17135036) * inp_0_2_1;
    result0 += M4(0.08454391, 0.07143246, 0.04092474, -0.018413056, -0.031736016, 0.023724172, -0.13096137, 0.061257955, -0.0030199776, -0.01834064, 0.02929831, -0.025394762, -0.0043059485, 0.028572496, -0.049785998, -0.022869091) * inp_0_0_2;
    result0 += M4(0.10324873, 0.1523362, 0.23635931, 0.35253802, -0.008770391, -0.021473547, 0.036186446, -0.26225662, -0.010667261, -0.0075540408, 0.051846568, 0.18860032, -0.04833786, -0.0718069, 0.048583694, -0.024800401) * inp_0_1_2;
    result0 += M4(-0.057031725, -0.012288923, 0.09451923, 0.12986574, 0.018900845, 0.019062458, -0.0105864145, -0.08220464, -0.012723802, -0.0020866934, 0.00867099, 0.010484449, 0.004267567, -0.019439926, -0.14326775, -0.078754954) * inp_0_2_2;
    const V4 inp_1_0_0 = inp[1][local_xy.y + 0][local_xy.x + 0];
    const V4 inp_1_1_0 = inp[1][local_xy.y + 0][local_xy.x + 1];
    const V4 inp_1_2_0 = inp[1][local_xy.y + 0][local_xy.x + 2];
    const V4 inp_1_0_1 = inp[1][local_xy.y + 1][local_xy.x + 0];
    const V4 inp_1_1_1 = inp[1][local_xy.y + 1][local_xy.x + 1];
    const V4 inp_1_2_1 = inp[1][local_xy.y + 1][local_xy.x + 2];
    const V4 inp_1_0_2 = inp[1][local_xy.y + 2][local_xy.x + 0];
    const V4 inp_1_1_2 = inp[1][local_xy.y + 2][local_xy.x + 1];
    const V4 inp_1_2_2 = inp[1][local_xy.y + 2][local_xy.x + 2];
    result0 += M4(0.24228807, -0.07238829, -0.060415093, -0.112476654, -0.11459817, 0.034957398, 0.03210302, 0.06840557, 0.041690554, -0.023464313, -0.0014776275, -0.009271216, -0.13174734, 0.042944655, 0.014012628, 0.046636652) * inp_1_0_0;
    result0 += M4(-0.16134553, -0.00088126084, -0.027193166, -0.0050947308, -0.041731734, 0.008529797, -0.028042099, -0.020670928, -0.01671066, 0.18069951, 0.019194825, 0.022944374, 0.19228038, 0.021613471, -0.064233005, -0.11519071) * inp_1_1_0;
    result0 += M4(0.044753995, -0.0066907727, 0.030908683, 0.024458691, 0.016570963, -0.048398253, 0.019850234, -0.010740164, 0.027613988, -0.03081797, 0.010940212, 0.009742643, -0.10470173, 0.060894836, -0.06109745, -0.037596446) * inp_1_2_0;
    result0 += M4(-0.27494267, -0.09147259, -0.11259134, -0.06256599, 0.017150946, -0.043328434, 0.09179443, 0.01006615, -0.05989238, -0.069263406, -0.0014916584, -0.16064614, 0.0010542264, -0.13004725, 0.24667661, -0.082088485) * inp_1_0_1;
    result0 += M4(0.1671577, 0.2188189, 0.14605314, 0.24983403, -0.35287663, -0.009057758, -0.05589719, 0.25258467, 0.17345384, -0.043215327, 0.15989488, 0.50218475, 0.08234419, -0.17442633, -0.04216038, 0.03399851) * inp_1_1_1;
    result0 += M4(0.06806601, -0.01787937, 0.06282576, -0.018452078, 0.06877966, -0.062153116, 0.05569077, -0.07444796, -0.06265456, -0.101909354, 0.000663385, -0.123767935, -0.05559094, 0.23281865, -0.13507827, 0.17763351) * inp_1_2_1;
    result0 += M4(0.03108278, 0.081786156, -0.1273852, 0.015459817, -0.0038835683, -0.03761304, -0.01329088, -0.03810097, -0.006866996, -0.0026917085, -0.04805113, -0.02188175, -0.044686157, -0.05769521, 0.027794234, -0.034258544) * inp_1_0_2;
    result0 += M4(0.04046109, 0.054593697, 0.09375592, -0.046079148, 0.06113458, 0.021333626, -0.1418337, -0.12165059, -0.06869752, -0.08100969, 0.08020648, -0.064693734, -0.0028124053, 0.030328998, 0.022551663, 0.16523655) * inp_1_1_2;
    result0 += M4(0.0029879676, 0.030262103, 0.005333169, -0.04472132, 0.0296753, 0.026839273, 0.02410309, -0.0635502, 0.04190304, 0.024413696, -0.03108732, -0.08156412, -0.06740184, -0.07168115, 0.034320336, 0.21791045) * inp_1_2_2;
    const ivec2 output_base = ivec2(gl_GlobalInvocationID) * ivec2(1, 1);
    imageStore(out_image, output_base + ivec2(0, 0), result0);
}

//!DESC ArtCNN C4F8 DS (Depth-To-Space)
//!COMPUTE 12 16 12 16
//!HOOK LUMA
//!BIND conv2d_6
//!WIDTH LUMA.w 2.0 *
//!HEIGHT LUMA.h 2.0 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif

void hook() {
    vec4 result = vec4(0.0, 0.0, 0.0, 1.0);
    vec2 f0 = fract(conv2d_6_pos * conv2d_6_size);
    ivec2 i0 = ivec2(f0 * vec2(2.0));
    result.x = conv2d_6_tex((vec2(0.5) - f0) * conv2d_6_pt + conv2d_6_pos)[i0.y * 2 + i0.x];
    imageStore(out_image, ivec2(gl_GlobalInvocationID), clamp(result, 0.0, 1.0));
}
